apiVersion: v1
kind: ServiceAccount
metadata:
  name: appyters-configurer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: appyters-configurer
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: appyters-configurer
subjects:
- kind: ServiceAccount
  name: appyters-configurer
roleRef:
  kind: Role
  name: appyters-configurer
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: appyters-configurer
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      containers:
      - name: configurer
        image: bitnami/kubectl
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        - |
          kubectl create -n ${KUBE_NAMESPACE} configmap/appyters-config \
            --from-literal=APPYTER_DATA_DIR=s3://${S3_BUCKET}/appyters/#?client_kwargs.endpoint_url=${S3_ENDPOINT}&key=${S3_ACCESS_KEY}&secret=${S3_SECRET_KEY} \
            --from-literal=APPYTER_DISPATCHER=http://appyters-orchestrator.${KUBE_NAMESPACE}.svc.cluster.local
        env:
        - name: KUBE_NAMESPACE
          value: {{ .Release.Namespace }}
        - name: S3_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.s3.instance.name }}-credentials
              key: endpoint
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.s3.instance.name }}-credentials
              key: bucket
        - name: S3_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.instance.name }}-credentials
              key: username
        - name: S3_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.s3.instance.name }}-credentials
              key: password
      serviceAccountName: appyters-configurer
      restartPolicy: Never
