# Source: deployment-appyters-catalog.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-catalog
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-catalog
  template:
    metadata:
      labels:
        app: appyters-catalog
    spec:
      containers:
      - name: appyters-catalog
        image: maayanlab/appyters-catalog:{{ version }}
        imagePullPolicy: Always
        tty: true
      restartPolicy: Always
---
# Source: service-appyters-catalog.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyters-catalog
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-catalog
---
---
# Source: ingress-appyters-catalog.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-catalog
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-catalog
          servicePort: 80
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.TLS_SECRET }}' }}
{{ '{{- endif }}' }}
---
# Source: deployment-appyters-postgrest.yaml
{{ '{{- if eq .Values.POSTGREST "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-postgrest
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-postgrest
  template:
    metadata:
      labels:
        app: appyters-postgrest
    spec:
      containers:
      - name: appyters-postgrest
        image: postgrest/postgrest
        imagePullPolicy: Always
        tty: true
        env:
        - name: PGRST_DB_URI
          value: {{ '{{ .Values.PGRST_DB_URI }}' }}
        - name: PGRST_DB_SCHEMA
          value: {{ '{{ .Values.PGRST_DB_SCHEMA }}' }}
        - name: PGRST_DB_ANON_ROLE
          value: {{ '{{ .Values.PGRST_DB_ANON_ROLE }}' }}
        - name: PGRST_SERVER_PROXY_URI
          value: {{ '{{ .Values.PGRST_SERVER_PROXY_URI }}' }}
      restartPolicy: Always
---
# Source: service-appyters-postgrest.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyters-postgrest
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-postgrest
---
# Source: ingress-appyters-postgrest.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-postgrest
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-postgrest
          servicePort: 3000
        path: /postgrest/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
---
# Source: deployment-appyters-postgres.yaml
{{ '{{- if eq .Values.POSTGRES "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-postgres
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-postgres
  template:
    metadata:
      labels:
        app: appyters-postgres
    spec:
      containers:
      - name: appyters-postgres
        image: maayanlab/appyters-postgres:latest
        imagePullPolicy: Always
        tty: true
        env:
          POSTGRES_DB: appyters
          POSTGRES_USER: appyters
          POSTGRES_PASSWORD: {{ '{{ .Values.POSTGRES_PASSWORD }}' }}
      restartPolicy: Always
{{ '{{- endif }}' }}
---
# Source: deployment-appyters-s3.yaml
{{ '{{- if eq .Values.S3 "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-s3
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-s3
  template:
    metadata:
      labels:
        app: appyters-s3
    spec:
      containers:
      - name: appyters-s3
        image: maayanlab/appyters-s3:latest
        imagePullPolicy: Always
        tty: true
        env:
          MINIO_BUCKET: {{ '{{ .Values.MINIO_BUCKET }}' }}
          MINIO_ACCESS_KEY: {{ '{{ .Values.MINIO_ACCESS_KEY }}' }}
          MINIO_SECRET_KEY: {{ '{{ .Values.MINIO_SECRET_KEY }}' }}
      restartPolicy: Always
---
# Source: service-appyters-s3.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyters-s3
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-s3
---
# Source: ingress-appyters-s3.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-s3
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-s3
          servicePort: 9000
        path: /postgrest/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
{%- for appyter in appyters %}
---
# Source: deployment-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyter-{{ appyter['name'].lower() }}
  template:
    metadata:
      labels:
        app: appyter-{{ appyter['name'].lower() }}
    spec:
      containers:
      - name: appyter-{{ appyter['name'].lower() }}
        image: maayanlab/appyter-{{ appyter['name'].lower() }}:{{ appyter['version'] }}
        imagePullPolicy: Always
        tty: true
        env:
        - name: PREFIX
          value: /{{ appyter['name'] }}/
        - name: PORT
          value: '80'
        - name: PROXY
          value: 'true'
      restartPolicy: Always
---
# Source: service-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-{{ appyter['name'].lower() }}
---
# Source: ingress-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyter-{{ appyter['name'].lower() }}
          servicePort: 80
        path: /{{ appyter['name'] }}/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{%- endfor %}
