# Source: Chart.yaml
apiVersion: v1
appVersion: "0.0.1"
description: Appyters Catalog
name: appyters
version: v1
---
# Source: values.yaml
TLS_ISSUER: "letsencrypt-prod"

APPYTERS_SERVER_NAME: "appyters.maayanlab.cloud"
APPYTERS_TLS_SECRET: "appyters-maayanlab-cloud-tls"

APPYTERS_ORCHESTRATOR_CONCURRENT_JOBS: "4"

POSTGREST: "true"
PGRST_DB_ANON_ROLE: "guest"
PGRST_DB_SCHEMA: "api"
PGRST_DB_URI: "postgres://appyters-postgres:5432/appyters"
PGRST_SERVER_PROXY_URI: "https://appyters.maayanlab.cloud/postgrest"

POSTGRES: "true"
POSTGRES_PASSWORD: ""
POSTGRES_PV: "true"
POSTGRES_PV_CLASS: "aws-ssd"
POSTGRES_PV_SIZE: "10G"

S3: "true"
S3_URI: "s3://<S3_ACCESS_KEY>:<S3_SECRET_KEY>@s3.appyters.maayanlab.cloud/"
S3_BUCKET: "storage"
S3_ACCESS_KEY: ""
S3_SECRET_KEY: ""
S3_SERVER_NAME: "s3.appyters.maayanlab.cloud"
S3_TLS_SECRET: "s3-appyters-maayanlab-cloud-tls"
S3_PV: "true"
S3_PV_CLASS: "aws-ssd"
S3_PV_SIZE: "10G"
---
# Source: templates/deployment-appyters-catalog.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-catalog
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-catalog
  template:
    metadata:
      labels:
        app: appyters-catalog
    spec:
      containers:
      - name: appyters-catalog
        image: maayanlab/appyters-catalog:{{ version }}
        imagePullPolicy: Always
        tty: true
      restartPolicy: Always
---
# Source: templates/service-appyters-catalog.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyters-catalog
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-catalog
---
# Source: templates/ingress-appyters-catalog.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-catalog
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-catalog
          servicePort: 80
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.APPYTERS_TLS_SECRET }}' }}
{{ '{{- endif }}' }}
---
# Source: templates/deployment-appyters-postgrest.yaml
{{ '{{- if eq .Values.POSTGREST "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-postgrest
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-postgrest
  template:
    metadata:
      labels:
        app: appyters-postgrest
    spec:
      containers:
      - name: appyters-postgrest
        image: postgrest/postgrest
        imagePullPolicy: Always
        tty: true
        env:
        - name: PGRST_DB_URI
          value: {{ '{{ .Values.PGRST_DB_URI }}' }}
        - name: PGRST_DB_SCHEMA
          value: {{ '{{ .Values.PGRST_DB_SCHEMA }}' }}
        - name: PGRST_DB_ANON_ROLE
          value: {{ '{{ .Values.PGRST_DB_ANON_ROLE }}' }}
        - name: PGRST_SERVER_PROXY_URI
          value: {{ '{{ .Values.PGRST_SERVER_PROXY_URI }}' }}
      restartPolicy: Always
{{ '{{- endif }}' }}
---
# Source: templates/service-appyters-postgrest.yaml
{{ '{{- if eq .Values.POSTGREST "true" }}' }}
apiVersion: v1
kind: Service
metadata:
  name: appyters-postgrest
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-postgrest
{{ '{{- endif }}' }}
---
# Source: templates/ingress-appyters-postgrest.yaml
{{ '{{- if eq .Values.POSTGREST "true" }}' }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-postgrest
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-postgrest
          servicePort: 3000
        path: /postgrest/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.APPYTERS_TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
---
# Source: templates/deployment-appyters-postgres.yaml
{{ '{{- if eq .Values.POSTGRES "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-postgres
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-postgres
  template:
    metadata:
      labels:
        app: appyters-postgres
    spec:
{{ '{{- if eq .Values.S3_PV "true" }}' }}
      volumes:
      - name: appyters-postgres-data
        persistentVolumeClaim:
          claimName: appyters-postgres-data-claim
{{ '{{- endif }}' }}
      containers:
      - name: appyters-postgres
        image: maayanlab/appyters-postgres:latest
        imagePullPolicy: Always
        tty: true
        env:
          POSTGRES_DB: appyters
          POSTGRES_USER: appyters
          POSTGRES_PASSWORD: {{ '{{ .Values.POSTGRES_PASSWORD }}' }}
        volumeMounts:
        - mountPath: /var/lib/postgresql
          name: appyters-postgres-data
      restartPolicy: Always
{{ '{{- endif }}' }}
---
# Source: templates/appyters-postgres-pvc.yaml
{{ '{{- if eq .Values.POSTGRES "true" }}' }}
{{ '{{- if eq .Values.POSTGRES_PV "true" }}' }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: appyters-postgres-data-claim
spec:
  storageClassName: {{ '{{ .Values.POSTGRES_PV_CLASS }}' }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ '{{ .Values.POSTGRES_PV_SIZE }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
---
# Source: templates/service-appyters-postgres.yaml
{{ '{{- if eq .Values.POSTGRES "true" }}' }}
apiVersion: v1
kind: Service
metadata:
  name: appyters-postgres
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-postgres
{{ '{{- endif }}' }}
---
# Source: templates/deployment-appyters-s3.yaml
{{ '{{- if eq .Values.S3 "true" }}' }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-s3
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-s3
  template:
    metadata:
      labels:
        app: appyters-s3
    spec:
{{ '{{- if eq .Values.S3_PV "true" }}' }}
      volumes:
      - name: appyters-s3-data
        persistentVolumeClaim:
          claimName: appyters-s3-data-claim
{{ '{{- endif }}' }}
      containers:
      - name: appyters-s3
        image: maayanlab/appyters-s3:latest
        imagePullPolicy: Always
        tty: true
        env:
          MINIO_BUCKET: {{ '{{ .Values.S3_BUCKET }}' }}
          MINIO_ACCESS_KEY: {{ '{{ .Values.S3_ACCESS_KEY }}' }}
          MINIO_SECRET_KEY: {{ '{{ .Values.S3_SECRET_KEY }}' }}
{{ '{{- if eq .Values.S3_PV "true" }}' }}
        volumeMounts:
        - mountPath: /data
          name: appyters-s3-data
{{ '{{- endif }}' }}
      restartPolicy: Always
{{ '{{- endif }}' }}
---
# Source: templates/pv-appyters-s3.yaml
{{ '{{- if eq .Values.S3 "true" }}' }}
{{ '{{- if eq .Values.S3_PV "true" }}' }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: appyters-s3-data-claim
spec:
  storageClassName: {{ '{{ .Values.S3_PV_CLASS }}' }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ '{{ .Values.S3_PV_SIZE }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
---
# Source: templates/service-appyters-s3.yaml
{{ '{{- if eq .Values.S3 "true" }}' }}
apiVersion: v1
kind: Service
metadata:
  name: appyters-s3
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
    protocol: TCP
    targetPort: 9000
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-s3
{{ '{{- endif }}' }}
---
# Source: templates/ingress-appyters-s3.yaml
{{ '{{- if eq .Values.S3 "true" }}' }}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyters-s3
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.S3_SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyters-s3
          servicePort: 9000
        path: /postgrest/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.S3_SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.S3_TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{{ '{{- endif }}' }}
---
# Source: templates/deployment-appyters-orchestrator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyters-orchestrator
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyters-orchestrator
  template:
    metadata:
      labels:
        app: appyters-orchestrator
    spec:
      containers:
      - name: appyters-orchestrator
        image: maayanlab/appyter:latest
        imagePullPolicy: Always
        tty: true
        env:
        - HOST=0.0.0.0
        - PORT=80
        - JOBS={{ .Values.APPYTERS_ORCHESTRATOR_CONCURRENT_JOBS }}
        - DISPATCH=kubernetes
        - DEBUG=false
      restartPolicy: Always
---
# Source: templates/service-appyters-orchestrator.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyters-orchestrator
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-orchestrator
{%- for appyter in appyters %}
---
# Source: templates/deployment-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
spec:
  replicas: 1
  selector:
    matchLabels:
      app: appyter-{{ appyter['name'].lower() }}
  template:
    metadata:
      labels:
        app: appyter-{{ appyter['name'].lower() }}
    spec:
      containers:
      - name: appyter-{{ appyter['name'].lower() }}
        image: maayanlab/appyter-{{ appyter['name'].lower() }}:{{ appyter['version'] }}
        imagePullPolicy: Always
        tty: true
        env:
        - name: PROXY
          value: 'true'
        - name: HOST
          value: 0.0.0.0
        - name: PORT
          value: '80'
        - name: PREFIX
          value: /{{ appyter['name'] }}/
        - name: DATA_DIR
          value: {{ '{{ .Values.S3_URI }}' }}/{{ '{{ .Values.S3_BUCKET }}' }}/{{ appyter['name'] }}/
        - name: DISPATCHER
          value: http://appyters-orchestrator
        - name: DISPATCHER_URL
          value: http://appyter-{{ appyter['name'].lower() }}/{{ appyter['name'] }}
        - name: DISPATCHER_IMAGE
          value: maayanlab/appyter-{{ appyter['name'].lower() }}:{{ appyter['version'] }}
      restartPolicy: Always
---
# Source: templates/service-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: v1
kind: Service
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    workload.user.cattle.io/workloadselector: deployment-appyters-{{ appyter['name'].lower() }}
---
# Source: templates/ingress-appyter-{{ appyter['name'].lower() }}.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: appyter-{{ appyter['name'].lower() }}
  namespace: appyters
{{ '{{- if .Values.TLS_ISSUER }}' }}
  annotations:
    cert-manager.io/issuer: {{ '{{ .Values.TLS_ISSUER }}' }}
    kubernetes.io/tls-acme: "true"
{{ '{{- endif }}' }}
spec:
  rules:
  - host: "{{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}"
    http:
      paths:
      - backend:
          serviceName: appyter-{{ appyter['name'].lower() }}
          servicePort: 80
        path: /{{ appyter['name'] }}/
{{ '{{- if .Values.TLS_ISSUER }}' }}
  tls:
  - hosts:
    - {{ '{{ .Values.APPYTERS_SERVER_NAME }}' }}
    secretName: {{ '{{ .Values.APPYTERS_TLS_SECRET }}' }}
{{ '{{- endif }}' }}
{%- endfor %}