version: '3.4'
x-logging:
  &default-logging
  driver: 'json-file'
  options:
    max-size: '100k'
    max-file: '10'
services:
  appyters-ingress:
    build: ./deploy/traefik
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-ingress:{{ version }}
    restart: unless-stopped
    networks:
      default:
        aliases:
          - ${SERVER_NAME}
          - s3.${SERVER_NAME}
    command: >
      --api.insecure=true
      --providers.docker
      --providers.docker.exposedByDefault=false
      --providers.file.directory=/config
      --providers.file.watch=true
      --entrypoints.web.address=:80
{%- if tls %}
      --entrypoints.web.http.redirections.entrypoint.to=websecure
      --entrypoints.web.http.redirections.entrypoint.scheme=https
      --entrypoints.websecure.address=:443
      --certificatesresolvers.letsencrypt-prod.acme.email=${LETSENCRYPT_EMAIL}
      --certificatesresolvers.letsencrypt-prod.acme.storage=/data/acme.json
      --certificatesresolvers.letsencrypt-prod.acme.tlschallenge=true
{%- endif %}
    environment:
      - SERVER_NAME
      - PASSTHROUGH
    ports:
      - 80:80
      - 8080:8080
{%- if tls %}
      - 443:443
{%- endif %}
{%- if aws_s3_proxy %}
      - "traefik.http.routers.storageproxy.rule=(Host(`s3.${SERVER_NAME}`) || Host(`${SERVER_NAME}`)) && PathPrefix(`/storage`)"
      - "traefik.http.routers.storageproxy.service=storageproxy"
      - "traefik.http.services.storageproxy.loadbalancer.servers[0].url=https://s3.amazonaws.com"
      - "traefik.http.routers.storageproxy.middlewares=storageproxy-addprefix"
      - "traefik.http.middlewares.storageproxy-addprefix.addprefix.prefix=/appyter"
{%- if tls %}
      - "traefik.http.routers.storageproxy.tls=true"
      - "traefik.http.routers.storageproxy.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.storageproxy.tls.domains[0].main=${SERVER_NAME}"
      - "traefik.http.routers.storageproxy.tls.domains[1].main=s3.${SERVER_NAME}"
{%- endif %}
{%- endif %}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./deploy/traefik/config:/config
      - ./data/ingress:/data
    logging: *default-logging
  appyters-catalog:
    build: ./app
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-catalog:{{ version }}
    restart: unless-stopped
    #depends_on:
    #  - appyters-ingress
    #  - appyters-postgrest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`${SERVER_NAME}`)"
      - "traefik.http.services.app.loadbalancer.server.port=80"
{%- if tls %}
      - "traefik.http.routers.app.tls=true"
      - "traefik.http.routers.app.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.app.tls.domains[0].main=${SERVER_NAME}"
{% endif %}
    logging: *default-logging
  appyters-orchestrator:
    build:
      context: ./deploy/appyter
      args:
        - appyter_version=appyter[production]@git+https://github.com/Maayanlab/appyter@${APPYTER_TAG:-v}${LIBRARY_VERSION}
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-orchestrator:{{ version }}-${APPYTER_TAG:-}${LIBRARY_VERSION}
    restart: unless-stopped
    ports:
      - 5000:5000
    environment:
      APPYTER_HOST: "0.0.0.0"
      APPYTER_JOBS: "3"
      APPYTER_JOBS_PER_IMAGE: "1"
      APPYTER_DEBUG: "false"
    command:
      - appyter
      - orchestration
      - dispatcher
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    logging: *default-logging
  appyters-postgrest:
    build: ./deploy/postgrest
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-postgrest:{{ version }}
    restart: unless-stopped
    #depends_on:
    #  - appyters-ingress
    #  - appyters-postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postgrest.rule=Host(`${SERVER_NAME}`) && PathPrefix(`/postgrest`)"
      - "traefik.http.services.postgrest.loadbalancer.server.port=3000"
      - "traefik.http.routers.postgrest.middlewares=postgrest-stripprefix"
      - "traefik.http.middlewares.postgrest-stripprefix.stripprefix.prefixes=/postgrest"
{%- if tls %}
      - "traefik.http.routers.postgrest.tls=true"
      - "traefik.http.routers.postgrest.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.postgrest.tls.domains[0].main=${SERVER_NAME}"
{%- endif %}
    environment:
      PGRST_DB_URI: "postgres://appyters:${POSTGRES_PASSWORD}@appyters-postgres:5432/appyters"
      PGRST_DB_SCHEMA: api
      PGRST_DB_ANON_ROLE: guest
      PGRST_SERVER_PROXY_URI: "http{% if tls %}s{% endif %}://${SERVER_NAME}/postgrest"
{%- if auth %}
      PGRST_JWT_SECRET: ${PGRST_JWT_SECRET}
      PGRST_ROLE_CLAIM_KEY: ${PGRST_ROLE_CLAIM_KEY}
{%- endif %}
    logging: *default-logging
  appyters-postgres:
    build: ./deploy/postgres
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-postgres:{{ version }}
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: appyters
      POSTGRES_USER: appyters
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres/:/var/lib/postgresql/data
    logging: *default-logging
{%- if minio %}
  appyters-s3:
    build: ./deploy/minio
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-s3:{{ version }}
    restart: unless-stopped
    #depends_on:
    #  - appyters-ingress
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.s3.rule=Host(`s3.${SERVER_NAME}`) || (Host(`${SERVER_NAME}`) && PathPrefix(`/storage`))"
      - "traefik.http.routers.s3.service=s3"
      - "traefik.http.services.s3.loadbalancer.server.port=9000"
{%- if tls %}
      - "traefik.http.routers.s3.tls=true"
      - "traefik.http.routers.s3.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.s3.tls.domains[0].main=${SERVER_NAME}"
      - "traefik.http.routers.s3.tls.domains[1].main=s3.${SERVER_NAME}"
{%- endif %}
      - "traefik.http.routers.minio.rule=Host(`minio.${SERVER_NAME}`)"
      - "traefik.http.routers.minio.service=minio"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"
{%- if tls %}
      - "traefik.http.routers.minio.tls=true"
      - "traefik.http.routers.minio.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.minio.tls.domains[0].main=minio.${SERVER_NAME}"
{%- endif %}
    environment:
      MINIO_BUCKET: ${MINIO_BUCKET}
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
      MINIO_SERVER_URL: http{% if tls %}s{% endif %}://s3.${SERVER_NAME}
      MINIO_BROWSER_REDIRECT_URL: http{% if tls %}s{% endif %}://minio.${SERVER_NAME}
    volumes:
      - ./data/minio/.minio:/root/.minio
      - ./data/minio/:/data
    logging: *default-logging
{%- endif %}
{%- if auth %}
  appyters-auth:
    build: ./deploy/keycloak
    image: ${DOCKER_REGISTRY:-maayanlab}/appyters-auth:{{ version }}
    restart: unless-stopped
    environment:
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: "${KEYCLOAK_PASSWORD}"
      KEYCLOAK_FRONTEND_URL: "${KEYCLOAK_URL}"
      DB_VENDOR: postgres
      DB_ADDR: appyters-postgres
      DB_DATABASE: appyters
      DB_SCHEMA: keycloak
      DB_USER: appyters
      DB_PASSWORD: "${POSTGRES_PASSWORD}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.appyters-auth.rule=Host(`${SERVER_NAME}`) && PathPrefix(`/auth`)"
      - "traefik.http.services.appyters-auth.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.appyters-auth.headers.customrequestheaders.X-Forwarded-Proto=http"
      - "traefik.http.routers.appyters-auth.middlewares=appyters-auth@docker"
{%- if tls %}
      - "traefik.http.routers.appyters-auth.tls=true"
      - "traefik.http.routers.appyters-auth.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.appyters-auth.tls.domains[0].main=${SERVER_NAME}"
{%- endif %}
    logging: *default-logging
{%- endif %}
{%- for appyter in appyters %}
  appyter-{{ appyter['name'].lower() }}:
    build:
      context: {{ os.path.relpath(appyter['path'], root_dir) }}
      dockerfile: Dockerfile
      args:
        - appyter_version=appyter[production]@git+https://github.com/Maayanlab/appyter@${APPYTER_TAG:-v}${LIBRARY_VERSION}
    image: ${DOCKER_REGISTRY:-maayanlab}/appyter-{{ appyter['name'].lower() }}:{{ appyter['version'] }}-${APPYTER_TAG:-}${LIBRARY_VERSION}
    command: appyter-catalog-helper entrypoint
    restart: unless-stopped
    #depends_on:
    #  - appyters-ingress
    #  - appyters-orchestrator
{%- if minio %}
    #  - appyters-s3
{%- endif %}
    environment:
      - APPYTER_PREFIX=/{{ appyter['name'] }}/
      - APPYTER_PORT=5000
      - APPYTER_PROXY=true
      - APPYTER_PUBLIC_URL=http{% if tls %}s{% endif %}://${SERVER_NAME}/{{ appyter['name'] }}/
      - APPYTER_DATA_DIR=${APPYTERS_DATA_DIR}
      - APPYTER_EXECUTOR=dispatch::http://appyters-orchestrator:5000#?params.executor=docker::${DOCKER_REGISTRY:-maayanlab}/appyter-{{ appyter['name'].lower() }}:{{ appyter['version'] }}-${APPYTER_TAG:-}${LIBRARY_VERSION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{ appyter['name'].lower() }}.rule=Host(`${SERVER_NAME}`) && PathPrefix(`/{{ appyter['name'] }}/`)"
      - "traefik.http.services.{{ appyter['name'].lower() }}.loadbalancer.server.port=5000"
      - "traefik.http.middlewares.{{ appyter['name'].lower() }}.headers.customrequestheaders.X-Forwarded-Proto=http{% if tls %}s{% endif %}"
      - "traefik.http.routers.{{ appyter['name'].lower() }}.middlewares={{ appyter['name'].lower() }}@docker"
{%- if tls %}
      - "traefik.http.routers.{{ appyter['name'].lower() }}.tls=true"
      - "traefik.http.routers.{{ appyter['name'].lower() }}.tls.certresolver=letsencrypt-prod"
      - "traefik.http.routers.{{ appyter['name'].lower() }}.tls.domains[0].main=${SERVER_NAME}"
{% endif %}
    volumes:
      - $HOME/.cache/pip-docker/:/root/.cache/pip
    logging: *default-logging
{%- endfor %}
